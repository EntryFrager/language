call main
hlt

;--------------------------------------------------------------------------------------------
;------------function-main------------
;--------------------------------------------------------------------------------------------

main:
		in

;---pop-ident---

		push rbx
		push 1
		add
		pop rbx
		pop [rbx]
		push rbx
		push 1
		sub
		pop rbx

;---end-pop-ident---

		in

;---pop-ident---

		push rbx
		push 2
		add
		pop rbx
		pop [rbx]
		push rbx
		push 2
		sub
		pop rbx

;---end-pop-ident---

		in

;---pop-ident---

		push rbx
		push 3
		add
		pop rbx
		pop [rbx]
		push rbx
		push 3
		sub
		pop rbx

;---end-pop-ident---


;---call-function---


;---push-ident---

		push rbx
		push 1
		add
		pop rbx
		push [rbx]
		push rbx
		push 1
		sub
		pop rbx

;---end-push-ident---


;---pop-ident---

		push rbx
		push 5
		add
		pop rbx
		pop [rbx]
		push rbx
		push 5
		sub
		pop rbx

;---end-pop-ident---


;---push-ident---

		push rbx
		push 2
		add
		pop rbx
		push [rbx]
		push rbx
		push 2
		sub
		pop rbx

;---end-push-ident---


;---pop-ident---

		push rbx
		push 6
		add
		pop rbx
		pop [rbx]
		push rbx
		push 6
		sub
		pop rbx

;---end-pop-ident---


;---push-ident---

		push rbx
		push 3
		add
		pop rbx
		push [rbx]
		push rbx
		push 3
		sub
		pop rbx

;---end-push-ident---


;---pop-ident---

		push rbx
		push 7
		add
		pop rbx
		pop [rbx]
		push rbx
		push 7
		sub
		pop rbx

;---end-pop-ident---

		push rbx
		push rbx
		push 4
		add
		pop rbx
		call solve_dispetcher
		pop rbx
		push rax			; save ret value in stack

;---end-call-function---

		ret

;--------------------------------------------------------------------------------------------
;------------function-solve_dispetcher------------
;--------------------------------------------------------------------------------------------

solve_dispetcher:

;---if-instructions---


;---push-ident---

		push rbx
		push 1
		add
		pop rbx
		push [rbx]
		push rbx
		push 1
		sub
		pop rbx

;---end-push-ident---

		push 0
		jne if_2
	if_1:

;---call-function---


;---push-ident---

		push rbx
		push 2
		add
		pop rbx
		push [rbx]
		push rbx
		push 2
		sub
		pop rbx

;---end-push-ident---


;---pop-ident---

		push rbx
		push 6
		add
		pop rbx
		pop [rbx]
		push rbx
		push 6
		sub
		pop rbx

;---end-pop-ident---


;---push-ident---

		push rbx
		push 3
		add
		pop rbx
		push [rbx]
		push rbx
		push 3
		sub
		pop rbx

;---end-push-ident---


;---pop-ident---

		push rbx
		push 7
		add
		pop rbx
		pop [rbx]
		push rbx
		push 7
		sub
		pop rbx

;---end-pop-ident---

		push rbx
		push rbx
		push 5
		add
		pop rbx
		call solve_linear
		pop rbx
		push rax			; save ret value in stack

;---end-call-function---

		jmp end_if_0
	if_2:

;---call-function---


;---push-ident---

		push rbx
		push 1
		add
		pop rbx
		push [rbx]
		push rbx
		push 1
		sub
		pop rbx

;---end-push-ident---


;---pop-ident---

		push rbx
		push 6
		add
		pop rbx
		pop [rbx]
		push rbx
		push 6
		sub
		pop rbx

;---end-pop-ident---


;---push-ident---

		push rbx
		push 2
		add
		pop rbx
		push [rbx]
		push rbx
		push 2
		sub
		pop rbx

;---end-push-ident---


;---pop-ident---

		push rbx
		push 7
		add
		pop rbx
		pop [rbx]
		push rbx
		push 7
		sub
		pop rbx

;---end-pop-ident---


;---push-ident---

		push rbx
		push 3
		add
		pop rbx
		push [rbx]
		push rbx
		push 3
		sub
		pop rbx

;---end-push-ident---


;---pop-ident---

		push rbx
		push 8
		add
		pop rbx
		pop [rbx]
		push rbx
		push 8
		sub
		pop rbx

;---end-pop-ident---

		push rbx
		push rbx
		push 5
		add
		pop rbx
		call solve_square
		pop rbx
		push rax			; save ret value in stack

;---end-call-function---

	end_if_0:

;---end-if-instructions---

		ret

;--------------------------------------------------------------------------------------------
;------------function-solve_linear------------
;--------------------------------------------------------------------------------------------

solve_linear:

;---start-of-expression---

		push 0
		push 1
		sub

;---pop-ident---

		push rbx
		push 7
		add
		pop rbx
		pop [rbx]
		push rbx
		push 7
		sub
		pop rbx

;---end-pop-ident---


;---end-of-expression---


;---start-of-expression---

		push 1

;---pop-ident---

		push rbx
		push 8
		add
		pop rbx
		pop [rbx]
		push rbx
		push 8
		sub
		pop rbx

;---end-pop-ident---


;---end-of-expression---


;---start-of-expression---

		push 1000

;---pop-ident---

		push rbx
		push 9
		add
		pop rbx
		pop [rbx]
		push rbx
		push 9
		sub
		pop rbx

;---end-pop-ident---


;---end-of-expression---


;---if-instructions---


;---push-ident---

		push rbx
		push 1
		add
		pop rbx
		push [rbx]
		push rbx
		push 1
		sub
		pop rbx

;---end-push-ident---

		push 0
		jne if_5
	if_4:

;---if-instructions---


;---push-ident---

		push rbx
		push 2
		add
		pop rbx
		push [rbx]
		push rbx
		push 2
		sub
		pop rbx

;---end-push-ident---

		push 0
		jne if_8
	if_7:

;---push-ident---

		push rbx
		push 9
		add
		pop rbx
		push [rbx]
		push rbx
		push 9
		sub
		pop rbx

;---end-push-ident---

		out
		jmp end_if_6
	if_8:

;---push-ident---

		push rbx
		push 7
		add
		pop rbx
		push [rbx]
		push rbx
		push 7
		sub
		pop rbx

;---end-push-ident---

		out
	end_if_6:

;---end-if-instructions---

		jmp end_if_3
	if_5:

;---start-of-expression---

		push 0

;---push-ident---

		push rbx
		push 2
		add
		pop rbx
		push [rbx]
		push rbx
		push 2
		sub
		pop rbx

;---end-push-ident---


;---push-ident---

		push rbx
		push 1
		add
		pop rbx
		push [rbx]
		push rbx
		push 1
		sub
		pop rbx

;---end-push-ident---

		div
		sub

;---pop-ident---

		push rbx
		push 10
		add
		pop rbx
		pop [rbx]
		push rbx
		push 10
		sub
		pop rbx

;---end-pop-ident---


;---end-of-expression---


;---push-ident---

		push rbx
		push 8
		add
		pop rbx
		push [rbx]
		push rbx
		push 8
		sub
		pop rbx

;---end-push-ident---

		out

;---push-ident---

		push rbx
		push 10
		add
		pop rbx
		push [rbx]
		push rbx
		push 10
		sub
		pop rbx

;---end-push-ident---

		out
	end_if_3:

;---end-if-instructions---

		push 0
		pop rax
		ret

;--------------------------------------------------------------------------------------------
;------------function-solve_square------------
;--------------------------------------------------------------------------------------------

solve_square:

;---start-of-expression---

		push 0
		push 1
		sub

;---pop-ident---

		push rbx
		push 7
		add
		pop rbx
		pop [rbx]
		push rbx
		push 7
		sub
		pop rbx

;---end-pop-ident---


;---end-of-expression---


;---start-of-expression---

		push 1

;---pop-ident---

		push rbx
		push 8
		add
		pop rbx
		pop [rbx]
		push rbx
		push 8
		sub
		pop rbx

;---end-pop-ident---


;---end-of-expression---


;---start-of-expression---

		push 2

;---pop-ident---

		push rbx
		push 11
		add
		pop rbx
		pop [rbx]
		push rbx
		push 11
		sub
		pop rbx

;---end-pop-ident---


;---end-of-expression---


;---if-instructions---


;---push-ident---

		push rbx
		push 3
		add
		pop rbx
		push [rbx]
		push rbx
		push 3
		sub
		pop rbx

;---end-push-ident---

		push 0
		jne if_11
	if_10:

;---start-of-expression---

		push 0

;---pop-ident---

		push rbx
		push 12
		add
		pop rbx
		pop [rbx]
		push rbx
		push 12
		sub
		pop rbx

;---end-pop-ident---


;---end-of-expression---


;---start-of-expression---

		push 0

;---push-ident---

		push rbx
		push 2
		add
		pop rbx
		push [rbx]
		push rbx
		push 2
		sub
		pop rbx

;---end-push-ident---


;---push-ident---

		push rbx
		push 1
		add
		pop rbx
		push [rbx]
		push rbx
		push 1
		sub
		pop rbx

;---end-push-ident---

		div
		sub

;---pop-ident---

		push rbx
		push 13
		add
		pop rbx
		pop [rbx]
		push rbx
		push 13
		sub
		pop rbx

;---end-pop-ident---


;---end-of-expression---


;---push-ident---

		push rbx
		push 11
		add
		pop rbx
		push [rbx]
		push rbx
		push 11
		sub
		pop rbx

;---end-push-ident---

		out

;---push-ident---

		push rbx
		push 12
		add
		pop rbx
		push [rbx]
		push rbx
		push 12
		sub
		pop rbx

;---end-push-ident---

		out

;---push-ident---

		push rbx
		push 13
		add
		pop rbx
		push [rbx]
		push rbx
		push 13
		sub
		pop rbx

;---end-push-ident---

		out
		jmp end_if_9
	if_11:

;---start-of-expression---


;---push-ident---

		push rbx
		push 2
		add
		pop rbx
		push [rbx]
		push rbx
		push 2
		sub
		pop rbx

;---end-push-ident---


;---push-ident---

		push rbx
		push 2
		add
		pop rbx
		push [rbx]
		push rbx
		push 2
		sub
		pop rbx

;---end-push-ident---

		mul
		push 4

;---push-ident---

		push rbx
		push 1
		add
		pop rbx
		push [rbx]
		push rbx
		push 1
		sub
		pop rbx

;---end-push-ident---

		mul

;---push-ident---

		push rbx
		push 3
		add
		pop rbx
		push [rbx]
		push rbx
		push 3
		sub
		pop rbx

;---end-push-ident---

		mul
		sub

;---pop-ident---

		push rbx
		push 14
		add
		pop rbx
		pop [rbx]
		push rbx
		push 14
		sub
		pop rbx

;---end-pop-ident---


;---end-of-expression---


;---if-instructions---


;---push-ident---

		push rbx
		push 14
		add
		pop rbx
		push [rbx]
		push rbx
		push 14
		sub
		pop rbx

;---end-push-ident---

		push 0
		jbe if_14
	if_13:

;---start-of-expression---

		sqrt

;---pop-ident---

		push rbx
		push 15
		add
		pop rbx
		pop [rbx]
		push rbx
		push 15
		sub
		pop rbx

;---end-pop-ident---


;---end-of-expression---


;---start-of-expression---

		push 0

;---push-ident---

		push rbx
		push 2
		add
		pop rbx
		push [rbx]
		push rbx
		push 2
		sub
		pop rbx

;---end-push-ident---

		sub

;---push-ident---

		push rbx
		push 15
		add
		pop rbx
		push [rbx]
		push rbx
		push 15
		sub
		pop rbx

;---end-push-ident---

		push 2
		div

;---push-ident---

		push rbx
		push 1
		add
		pop rbx
		push [rbx]
		push rbx
		push 1
		sub
		pop rbx

;---end-push-ident---

		mul
		sub

;---pop-ident---

		push rbx
		push 12
		add
		pop rbx
		pop [rbx]
		push rbx
		push 12
		sub
		pop rbx

;---end-pop-ident---


;---end-of-expression---


;---start-of-expression---

		push 0

;---push-ident---

		push rbx
		push 2
		add
		pop rbx
		push [rbx]
		push rbx
		push 2
		sub
		pop rbx

;---end-push-ident---

		sub

;---push-ident---

		push rbx
		push 15
		add
		pop rbx
		push [rbx]
		push rbx
		push 15
		sub
		pop rbx

;---end-push-ident---

		push 2
		div

;---push-ident---

		push rbx
		push 1
		add
		pop rbx
		push [rbx]
		push rbx
		push 1
		sub
		pop rbx

;---end-push-ident---

		mul
		add

;---pop-ident---

		push rbx
		push 13
		add
		pop rbx
		pop [rbx]
		push rbx
		push 13
		sub
		pop rbx

;---end-pop-ident---


;---end-of-expression---


;---push-ident---

		push rbx
		push 11
		add
		pop rbx
		push [rbx]
		push rbx
		push 11
		sub
		pop rbx

;---end-push-ident---

		out

;---push-ident---

		push rbx
		push 12
		add
		pop rbx
		push [rbx]
		push rbx
		push 12
		sub
		pop rbx

;---end-push-ident---

		out

;---push-ident---

		push rbx
		push 13
		add
		pop rbx
		push [rbx]
		push rbx
		push 13
		sub
		pop rbx

;---end-push-ident---

		out
		jmp end_if_12
	if_14:

;---push-ident---

		push rbx
		push 14
		add
		pop rbx
		push [rbx]
		push rbx
		push 14
		sub
		pop rbx

;---end-push-ident---

		push 0
		jne if_16
	if_15:

;---start-of-expression---

		push 0

;---push-ident---

		push rbx
		push 2
		add
		pop rbx
		push [rbx]
		push rbx
		push 2
		sub
		pop rbx

;---end-push-ident---

		push 2
		div

;---push-ident---

		push rbx
		push 1
		add
		pop rbx
		push [rbx]
		push rbx
		push 1
		sub
		pop rbx

;---end-push-ident---

		mul
		sub

;---pop-ident---

		push rbx
		push 10
		add
		pop rbx
		pop [rbx]
		push rbx
		push 10
		sub
		pop rbx

;---end-pop-ident---


;---end-of-expression---


;---push-ident---

		push rbx
		push 8
		add
		pop rbx
		push [rbx]
		push rbx
		push 8
		sub
		pop rbx

;---end-push-ident---

		out

;---push-ident---

		push rbx
		push 10
		add
		pop rbx
		push [rbx]
		push rbx
		push 10
		sub
		pop rbx

;---end-push-ident---

		out
		jmp end_if_12
	if_16:

;---push-ident---

		push rbx
		push 7
		add
		pop rbx
		push [rbx]
		push rbx
		push 7
		sub
		pop rbx

;---end-push-ident---

		out
	end_if_12:

;---end-if-instructions---

	end_if_9:

;---end-if-instructions---

		push 0
		pop rax
		ret
hlt
