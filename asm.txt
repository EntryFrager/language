push 0
pop rbx
call main
hlt
main:
		in
		push rbx
		push 1
		add
		pop rbx
		pop [rbx]
		push rbx
		push 1
		sub
		pop rbx
		in
		push rbx
		push 2
		add
		pop rbx
		pop [rbx]
		push rbx
		push 2
		sub
		pop rbx
		in
		push rbx
		push 3
		add
		pop rbx
		pop [rbx]
		push rbx
		push 3
		sub
		pop rbx
		push rbx
		push 1
		add
		pop rbx
		push [rbx]
		push rbx
		push 1
		sub
		pop rbx
		push rbx
		push 5
		add
		pop rbx
		pop [rbx]
		push rbx
		push 5
		sub
		pop rbx
		push rbx
		push 2
		add
		pop rbx
		push [rbx]
		push rbx
		push 2
		sub
		pop rbx
		push rbx
		push 6
		add
		pop rbx
		pop [rbx]
		push rbx
		push 6
		sub
		pop rbx
		push rbx
		push 3
		add
		pop rbx
		push [rbx]
		push rbx
		push 3
		sub
		pop rbx
		push rbx
		push 7
		add
		pop rbx
		pop [rbx]
		push rbx
		push 7
		sub
		pop rbx
		push rbx
		push rbx
		push 4
		add
		pop rbx
		call solve_dispetcher
		pop rbx
		push rax
		ret
solve_dispetcher:
		push rbx
		push 1
		add
		pop rbx
		push [rbx]
		push rbx
		push 1
		sub
		pop rbx
		push 0
		jne if_1
		push rbx
		push 2
		add
		pop rbx
		push [rbx]
		push rbx
		push 2
		sub
		pop rbx
		push rbx
		push 6
		add
		pop rbx
		pop [rbx]
		push rbx
		push 6
		sub
		pop rbx
		push rbx
		push 3
		add
		pop rbx
		push [rbx]
		push rbx
		push 3
		sub
		pop rbx
		push rbx
		push 7
		add
		pop rbx
		pop [rbx]
		push rbx
		push 7
		sub
		pop rbx
		push rbx
		push rbx
		push 5
		add
		pop rbx
		call solve_linear
		pop rbx
		push rax
		jmp end_if_0
	if_1:
		push rbx
		push 1
		add
		pop rbx
		push [rbx]
		push rbx
		push 1
		sub
		pop rbx
		push rbx
		push 6
		add
		pop rbx
		pop [rbx]
		push rbx
		push 6
		sub
		pop rbx
		push rbx
		push 2
		add
		pop rbx
		push [rbx]
		push rbx
		push 2
		sub
		pop rbx
		push rbx
		push 7
		add
		pop rbx
		pop [rbx]
		push rbx
		push 7
		sub
		pop rbx
		push rbx
		push 3
		add
		pop rbx
		push [rbx]
		push rbx
		push 3
		sub
		pop rbx
		push rbx
		push 8
		add
		pop rbx
		pop [rbx]
		push rbx
		push 8
		sub
		pop rbx
		push rbx
		push rbx
		push 5
		add
		pop rbx
		call solve_square
		pop rbx
		push rax
	end_if_0:
		push 0
		pop rax
		ret
solve_linear:
		push 0
		push 1
		sub
		push rbx
		push 7
		add
		pop rbx
		pop [rbx]
		push rbx
		push 7
		sub
		pop rbx
		push 1
		push rbx
		push 8
		add
		pop rbx
		pop [rbx]
		push rbx
		push 8
		sub
		pop rbx
		push 1000
		push rbx
		push 9
		add
		pop rbx
		pop [rbx]
		push rbx
		push 9
		sub
		pop rbx
		push rbx
		push 1
		add
		pop rbx
		push [rbx]
		push rbx
		push 1
		sub
		pop rbx
		push 0
		jne if_3
		push rbx
		push 2
		add
		pop rbx
		push [rbx]
		push rbx
		push 2
		sub
		pop rbx
		push 0
		jne if_5
		push rbx
		push 9
		add
		pop rbx
		push [rbx]
		push rbx
		push 9
		sub
		pop rbx
		out
		jmp end_if_4
	if_5:
		push rbx
		push 7
		add
		pop rbx
		push [rbx]
		push rbx
		push 7
		sub
		pop rbx
		out
	end_if_4:
		jmp end_if_2
	if_3:
		push 0
		push rbx
		push 2
		add
		pop rbx
		push [rbx]
		push rbx
		push 2
		sub
		pop rbx
		push rbx
		push 1
		add
		pop rbx
		push [rbx]
		push rbx
		push 1
		sub
		pop rbx
		div
		sub
		push rbx
		push 10
		add
		pop rbx
		pop [rbx]
		push rbx
		push 10
		sub
		pop rbx
		push rbx
		push 8
		add
		pop rbx
		push [rbx]
		push rbx
		push 8
		sub
		pop rbx
		out
		push rbx
		push 10
		add
		pop rbx
		push [rbx]
		push rbx
		push 10
		sub
		pop rbx
		out
	end_if_2:
		push 0
		pop rax
		ret
solve_square:
		push 0
		push 1
		sub
		push rbx
		push 7
		add
		pop rbx
		pop [rbx]
		push rbx
		push 7
		sub
		pop rbx
		push 1
		push rbx
		push 8
		add
		pop rbx
		pop [rbx]
		push rbx
		push 8
		sub
		pop rbx
		push 2
		push rbx
		push 11
		add
		pop rbx
		pop [rbx]
		push rbx
		push 11
		sub
		pop rbx
		push rbx
		push 3
		add
		pop rbx
		push [rbx]
		push rbx
		push 3
		sub
		pop rbx
		push 0
		jne if_7
		push 0
		push rbx
		push 12
		add
		pop rbx
		pop [rbx]
		push rbx
		push 12
		sub
		pop rbx
		push 0
		push rbx
		push 2
		add
		pop rbx
		push [rbx]
		push rbx
		push 2
		sub
		pop rbx
		push rbx
		push 1
		add
		pop rbx
		push [rbx]
		push rbx
		push 1
		sub
		pop rbx
		div
		sub
		push rbx
		push 13
		add
		pop rbx
		pop [rbx]
		push rbx
		push 13
		sub
		pop rbx
		push rbx
		push 11
		add
		pop rbx
		push [rbx]
		push rbx
		push 11
		sub
		pop rbx
		out
		push rbx
		push 12
		add
		pop rbx
		push [rbx]
		push rbx
		push 12
		sub
		pop rbx
		out
		push rbx
		push 13
		add
		pop rbx
		push [rbx]
		push rbx
		push 13
		sub
		pop rbx
		out
		jmp end_if_6
	if_7:
		push rbx
		push 2
		add
		pop rbx
		push [rbx]
		push rbx
		push 2
		sub
		pop rbx
		push rbx
		push 2
		add
		pop rbx
		push [rbx]
		push rbx
		push 2
		sub
		pop rbx
		mul
		push 4
		push rbx
		push 1
		add
		pop rbx
		push [rbx]
		push rbx
		push 1
		sub
		pop rbx
		mul
		push rbx
		push 3
		add
		pop rbx
		push [rbx]
		push rbx
		push 3
		sub
		pop rbx
		mul
		sub
		push rbx
		push 14
		add
		pop rbx
		pop [rbx]
		push rbx
		push 14
		sub
		pop rbx
		push rbx
		push 14
		add
		pop rbx
		push [rbx]
		push rbx
		push 14
		sub
		pop rbx
		push 0
		jbe if_9
		sqrt
		push rbx
		push 15
		add
		pop rbx
		pop [rbx]
		push rbx
		push 15
		sub
		pop rbx
		push 0
		push rbx
		push 2
		add
		pop rbx
		push [rbx]
		push rbx
		push 2
		sub
		pop rbx
		sub
		push rbx
		push 15
		add
		pop rbx
		push [rbx]
		push rbx
		push 15
		sub
		pop rbx
		push 2
		div
		push rbx
		push 1
		add
		pop rbx
		push [rbx]
		push rbx
		push 1
		sub
		pop rbx
		mul
		sub
		push rbx
		push 12
		add
		pop rbx
		pop [rbx]
		push rbx
		push 12
		sub
		pop rbx
		push 0
		push rbx
		push 2
		add
		pop rbx
		push [rbx]
		push rbx
		push 2
		sub
		pop rbx
		sub
		push rbx
		push 15
		add
		pop rbx
		push [rbx]
		push rbx
		push 15
		sub
		pop rbx
		push 2
		div
		push rbx
		push 1
		add
		pop rbx
		push [rbx]
		push rbx
		push 1
		sub
		pop rbx
		mul
		add
		push rbx
		push 13
		add
		pop rbx
		pop [rbx]
		push rbx
		push 13
		sub
		pop rbx
		push rbx
		push 11
		add
		pop rbx
		push [rbx]
		push rbx
		push 11
		sub
		pop rbx
		out
		push rbx
		push 12
		add
		pop rbx
		push [rbx]
		push rbx
		push 12
		sub
		pop rbx
		out
		push rbx
		push 13
		add
		pop rbx
		push [rbx]
		push rbx
		push 13
		sub
		pop rbx
		out
		jmp end_if_8
	if_9:
		push rbx
		push 14
		add
		pop rbx
		push [rbx]
		push rbx
		push 14
		sub
		pop rbx
		push 0
		jne if_10
		push 0
		push rbx
		push 2
		add
		pop rbx
		push [rbx]
		push rbx
		push 2
		sub
		pop rbx
		push 2
		div
		push rbx
		push 1
		add
		pop rbx
		push [rbx]
		push rbx
		push 1
		sub
		pop rbx
		mul
		sub
		push rbx
		push 10
		add
		pop rbx
		pop [rbx]
		push rbx
		push 10
		sub
		pop rbx
		push rbx
		push 8
		add
		pop rbx
		push [rbx]
		push rbx
		push 8
		sub
		pop rbx
		out
		push rbx
		push 10
		add
		pop rbx
		push [rbx]
		push rbx
		push 10
		sub
		pop rbx
		out
		jmp end_if_8
	if_10:
		push rbx
		push 7
		add
		pop rbx
		push [rbx]
		push rbx
		push 7
		sub
		pop rbx
		out
	end_if_8:
	end_if_6:
		push 0
		pop rax
		ret
hlt
