push 0
pop rbx
call main
hlt

main:
		in
		pop [rbx + 0]
		push 1
		pop [rbx + 1]
		push [rbx + 0]
		push 0
		jb if_2
		push [rbx + 0]
		push 0
		jne if_1
	if_2:
		push [rbx + 1]
		out
		jmp end_if_0
	if_1:
		push [rbx + 0]
		pop [rbx + 3]
		push rbx
		push rbx
		push 3
		add
		pop rbx
		call a
		pop rbx
		push rax
		pop [rbx + 2]
		push [rbx + 2]
		out
		push [rbx + 0]
		pop [rbx + 3]
		push rbx
		push rbx
		push 3
		add
		pop rbx
		call NO_FACT
		pop rbx
		push rax
		pop [rbx + 2]
		push [rbx + 2]
		out
	end_if_0:
		ret

NO_FACT:
		push [rbx + 0]
		push 2
		je if_5
		push [rbx + 0]
		push 1
		jne if_4
	if_5:
		push [rbx + 0]
		pop rax
		ret
		jmp end_if_3
	if_4:
	end_if_3:
		push [rbx + 0]
		push 1
		sub
		pop [rbx + 1]
		push [rbx + 0]
		push 2
		sub
		pop [rbx + 2]
		push [rbx + 1]
		pop [rbx + 3]
		push rbx
		push rbx
		push 3
		add
		pop rbx
		call NO_FACT
		pop rbx
		push rax
		pop [rbx + 1]
		push [rbx + 2]
		pop [rbx + 3]
		push rbx
		push rbx
		push 3
		add
		pop rbx
		call NO_FACT
		pop rbx
		push rax
		pop [rbx + 2]
		push [rbx + 2]
		push [rbx + 1]
		add
		pop rax
		ret

a:
		push [rbx + 0]
		push 1
		jne if_7
		push [rbx + 0]
		pop rax
		ret
		jmp end_if_6
	if_7:
	end_if_6:
		push [rbx + 0]
		push 1
		sub
		pop [rbx + 1]
		push [rbx + 0]
		push [rbx + 1]
		pop [rbx + 2]
		push rbx
		push rbx
		push 2
		add
		pop rbx
		call a
		pop rbx
		push rax
		mul
		pop [rbx + 0]
		push [rbx + 0]
		pop rax
		ret
hlt
